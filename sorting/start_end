

class GFG
{
    ArrayList<Long> find(long v[], int n, int key)
    { 
 //LAST OCCURENCE

        int start = 0;

        int end = n - 1;

        long res = -1;

    

        while (start <= end) {

          int mid = start + (end - start) / 2;

          if (v[mid] == key) {

                res = mid;

                start = mid + 1;

                   

            } else if (key < v[mid]) {

                end = mid - 1;

            } else {

                start = mid + 1;

            }

        }

        ArrayList<Long>al=new ArrayList<>();

        al.add(res);

        

        

        //FIRST OCCURENCE

        

        int l = 0;

        int r = n - 1;

        long ans = -1;

    

        while (l<=r) {

          int mid = l+(r-l) / 2;

          if (v[mid] == key) {

                ans = mid;

                r=mid-1;

                   

            } else if (key < v[mid]) {

                r = mid - 1;

            } else {

                l = mid + 1;

            }

        }

        al.add(ans);

        

        Collections.reverse(al);

        return al;

    }
    }
